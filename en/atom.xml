<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qzyzz.github.io/en/</id>
    <title>知非</title>
    <updated>2023-05-23T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://qzyzz.github.io/en/"/>
    <subtitle>知非 Blog</subtitle>
    <icon>https://qzyzz.github.io/en/img/logo.png</icon>
    <rights>Copyright © 2023 qzy Built with Docusaurus.</rights>
    <entry>
        <title type="html"><![CDATA[vue3基础]]></title>
        <id>vue3-basics</id>
        <link href="https://qzyzz.github.io/en/vue3-basics"/>
        <updated>2023-05-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[请输入描述]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一篇博客]]></title>
        <id>first-blog</id>
        <link href="https://qzyzz.github.io/en/first-blog"/>
        <updated>2023-05-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[第一篇博客]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS :is() 伪类选择器使用指南]]></title>
        <id>css-is-pseudo-class-selector</id>
        <link href="https://qzyzz.github.io/en/css-is-pseudo-class-selector"/>
        <updated>2021-06-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[css :is() 伪类选择器还是一个正在逐步规范化的新特性，所以在使用上也需要注意一下变动，总之，它可以让我们减少编写重复选择器的次数，实现像 SASS/Less 等 CSS 预处理编译器类似的嵌套语法。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web性能优化：使用图片懒加载推迟屏幕外图片的加载]]></title>
        <id>web-performance-optimization-image-lazy-loading</id>
        <link href="https://qzyzz.github.io/en/web-performance-optimization-image-lazy-loading"/>
        <updated>2021-03-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在使用 chrome 的 lighthouse 对网站进行测速之后，发现有一条优化提示：推迟屏幕外的图片加载。之前有看到过要实现这样的效果需要使用 lazy loading，图片懒加载，但是需要使用 js 的方式来实现，由于本人十分懒惰，不想用太复杂的代码，于是在网上搜索了一番，发现 `<img>`  标签原生支持懒加载。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[实现前端网页 WebRTC 视频通话以及换脸特效]]></title>
        <id>webrtc-avatarify-face-swap-tutorial</id>
        <link href="https://qzyzz.github.io/en/webrtc-avatarify-face-swap-tutorial"/>
        <updated>2021-03-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[因为疫情的原因，线上视频会议软件异军突起，成为了在家办公的主要沟通渠道。而最近抖音上“蚂蚁呀嘿”恶搞换脸的小视频也突然火了起来，那我就想了想能不能在视频会议的时候换张脸活跃下气氛？]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web 性能优化：使用 CSS font-display 控制字体加载和替换]]></title>
        <id>css-font-display-intro</id>
        <link href="https://qzyzz.github.io/en/css-font-display-intro"/>
        <updated>2021-03-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在编写网站的时候，或多或少都会用到一些网络上的字体，CSS 3 中虽然加入了对 Web Fonts（网络字体）的支持，但是浏览器对它们的加载和默认处理方式会极大的影响网站的性能和用户体验。例如默认情况下，在 Web Fonts 加载时，使用该字体的地方会显示空白，直到字体下载完成之后才会显示，这时通过改变 CSS 中的 `font-display` 属性，就可以避免这个问题。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 游戏开发 - 物理碰撞引擎实现]]></title>
        <id>javascript-collision-physics</id>
        <link href="https://qzyzz.github.io/en/javascript-collision-physics"/>
        <updated>2021-02-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[从原生角度上如何实现游戏里的物理特性，例如运动、碰撞。不用框架编写一个简单的、基于 JavaScript Canvas 的物理引擎，实现小球的碰撞效果。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[从 0 仿微信 8.0 动态表情实现过程]]></title>
        <id>wechat-stickers-effect</id>
        <link href="https://qzyzz.github.io/en/wechat-stickers-effect"/>
        <updated>2021-01-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[微信 8.0 更新的一大特色就是支持动画表情，如果发送的消息只有一个内置的表情图标，这个表情会有一段简单的动画，一些特殊的表情还有全屏特效，例如烟花表情有全屏放烟花的特效，炸弹表情有爆炸动画并且消息和头像也会随之震动。本着作为前端工程师的职业精神，我就想看看能不能实现一个类似的特效。折腾许久之后，做出来的效果如下：]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[整理了5个JavaScript怪异行为及其原因]]></title>
        <id>5-javascript-tricky-problems</id>
        <link href="https://qzyzz.github.io/en/5-javascript-tricky-problems"/>
        <updated>2020-12-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[JavaScript 早期的规范不统一，也没有严格的标准，再加上它的语法灵活多样，有些看起来就不正确的代码却能正常执行，一些看起来符合逻辑的代码，运行结果却相差十万八千里。这些问题在日常开发中经常会导致 BUG，更重要的是，很多面试官会把它们拿出来当考验咱们 JS 工程师的能力。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[噢！原来这就是 TypeScript]]></title>
        <id>typescript-intro</id>
        <link href="https://qzyzz.github.io/en/typescript-intro"/>
        <updated>2020-06-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[TypeScript 是 JavaScript 的，带有类型的超集，并且可以编译为 JavaScript 脚本，这篇幅文章将带你认识一下 TypeScript]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[前后端通信之 HTTP 协议简介]]></title>
        <id>http-protocol</id>
        <link href="https://qzyzz.github.io/en/http-protocol"/>
        <updated>2020-05-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[HTTP 协议包括客户端和服务端两个实体，客户端发送请求给服务端，服务端返回响应给客户端。在 HTTP 中，数据称为资源，可以是 html 文档、图片、也可以是普通文本。资源是通过 URL 进行定位的。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[5个技巧助你成为 CSS 大神]]></title>
        <id>5-tips-to-master-css</id>
        <link href="https://qzyzz.github.io/en/5-tips-to-master-css"/>
        <updated>2020-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[都说 CSS 很难掌握，最愁给页面编写样式，其实都是因为还没有形成一个对 CSS 宏观的了解，只要有了正确的学习方法、设计思维，再通过不断的积累，就能轻松的掌握它。接下来我会把掌握 CSS 的 5 个技巧整理一下，让你在以后编写 CSS 的时候不再发愁。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS Flexbox 布局最容易理解完全教程]]></title>
        <id>css-flex-box-layout</id>
        <link href="https://qzyzz.github.io/en/css-flex-box-layout"/>
        <updated>2020-04-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[CSS flexbox 布局十分强大，它可以对元素进行水平和垂直方向上的对齐，也支持自由缩放，方便响应式布局的开发。这个文章就教你认识 flex-box 布局，看完之后你也能熟练的运用它！]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 选择器优先级特异性权重详解]]></title>
        <id>css-selector-specificity</id>
        <link href="https://qzyzz.github.io/en/css-selector-specificity"/>
        <updated>2020-04-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[在写 CSS 的时候你一定遇到过有些样式明明写对了，也选择了正确的 html 元素去应用这些样式，可是就是不生效，这是为什么呢？因为在选择同一个 HTML 元素的时候，不同的选择器有不同的优先级，优先级低的选择器的样式会被优先级高的覆盖。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Props 教程 - 制作一个按钮]]></title>
        <id>learn-react-props-buttons</id>
        <link href="https://qzyzz.github.io/en/learn-react-props-buttons"/>
        <updated>2020-03-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Rect Props 是编写可复用组件的核心，可以利用 Prop 让组件接收不同的参数，然后根据这些参数作出不同的表现，如形状、颜色等。]]></summary>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020年最新前端工程师学习路线]]></title>
        <id>front-end-learning-path</id>
        <link href="https://qzyzz.github.io/en/front-end-learning-path"/>
        <updated>2020-02-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[这段日子在 B 站上收到小伙伴最多的要求就是出一个前端学习路线，我能够充分的感受到大家抓耳挠腮加挠墙的迷茫~所以在这里给大家总结了一套前端学习路线。先从初级前端工程师所需的技能开始，然后一路升级到高级工程师该掌握的技能，层层相扣，让大家在工作中能游刃有余。最后附上我自己是如何从一个后端工程师转成了前端工程师^^。希望我的经历能对大家有帮助。]]></summary>
    </entry>
</feed>